View(test)
p <- plot_geo(test) %>%
add_trace(
z = ~medal_count, color = ~medal_count, colors = 'Blues',
text = ~country, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
p
runApp('Olympics_Dashbaord')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(tidyverse)
library(shiny)
library(leaflet)
library(dplyr)
library(leaflet.extras)
olympics_df <-  read.csv("df_athlete.csv", stringsAsFactors = FALSE)
# create the data frame of the map. This data frame contains the longitude and latitude
# of state borders in the map
library(ggplot2)
library(maps)
library(leaflet)
library(maps)
#countries <- c("Australia", "South Africa", "India", "Mexico", "USA", "Russia")
#head(merged_data_1 <- full_join(my_map_data,my_gapminder_data,by = "ISO"))
ui <- fluidPage(
plotOutput("m",height = 1000)
)
server <- function(input,output, session){
output$m<- renderPlot({
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(test) %>%
add_trace(
z = ~medal_count, color = ~medal_count, colors = 'Blues',
text = ~country, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
p})
}
shinyApp(ui, server)
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
df
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
df <- dplyr::select(df,COUNTRY,CODE)
olympics_df <-  read.csv("df_athlete.csv", stringsAsFactors = FALSE)
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal, 0),
Gold=replace_na(Medal, 0),
Bronze=replace_na(Medal, 0),
Silver=replace_na(Medal, 0))
olympics_df <- olympics_df %>%
drop_na()
olympics_df <- dplyr::select(olympics_df,Year,Medal,country)
medals <- left_join(medals,df,by=c("country"="COUNTRY"))
medals <- medals%>%
mutate(medal_temp=if_else(Medal==0,0, 1)) %>%
group_by(country,CODE, Year) %>%
summarize(medal_count = sum(medal_temp))
test <- left_join(medals,df,by=c("country"="COUNTRY"))
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(test) %>%
add_trace(
z = ~medal_count, color = ~medal_count, colors = 'Blues',
text = ~country, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Medal Count') %>%
layout(
title = 'World Olympics Medal History',
geo = g
)
p
olympics_df <- dplyr::select(olympics_df,Year,Medal,country)
medals <- left_join(medals,df,by=c("country"="COUNTRY"))
medals <- medals%>%
mutate(medal_temp=if_else(Medal==0,0, 1)) %>%
group_by(country,CODE, Year) %>%
summarize(medal_count = sum(medal_temp))
View(medals)
olympics_df <- dplyr::select(olympics_df,Year,Medal,country)
medals <- left_join(medals,df,by=c("country"="COUNTRY"))
View(medals)
olympics_df <- dplyr::select(olympics_df,Year,Medal,country)
medals <- left_join(olympics_df,df,by=c("country"="COUNTRY"))
medals <- medals%>%
mutate(medal_temp=if_else(Medal==0,0, 1)) %>%
group_by(country,CODE, Year) %>%
summarize(medal_count = sum(medal_temp))
test <- left_join(medals,df,by=c("country"="COUNTRY"))
runApp('Olympics_Dashbaord')
olympics_df <- dplyr::select(olympics_df,Year,Medal,country)
medals <- left_join(olympics_df,df,by=c("country"="COUNTRY"))
medals <- medals%>%
mutate(medal_temp=if_else(Medal==0,0, 1)) %>%
group_by(country,CODE,Year) %>%
summarize(medal_count = sum(medal_temp))
medals
medals <- medals%>%
mutate(medal_temp=if_else(Medal==0,0, 1)) %>%
group_by(country,CODE) %>%
summarize(medal_count = sum(medal_temp))
olympics_df <- dplyr::select(olympics_df,Year,Medal,country)
medals <- left_join(olympics_df,df,by=c("country"="COUNTRY"))
medals <- medals%>%
mutate(medal_temp=if_else(Medal==0,0, 1)) %>%
group_by(country,CODE) %>%
summarize(medal_count = sum(medal_temp))
medals
runApp('Olympics_Dashbaord')
runApp('~/test')
runApp('~/test')
x <- read.csv("df_athlete.csv", stringsAsFactors = FALSE)
athletes <- x
runApp('~/test')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
olympics_df$country
olympics_df$country.unique
olympics_df$country.unique()
unique(olympics_df$country)
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
unique(olympics_df$country)
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
library(tm)
library(wordcloud)
library(memoise)
install.packages(tm)
install.packages("tm")
install.packages("wordcloud")
install.packages("memoise")
install.packages("memoise")
install.packages("memoise")
library(tm)
library(wordcloud)
library(memoise)
myCorpus = Corpus(VectorSource(athletes$Sport))
myDTM = TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m = as.matrix(myDTM)
m
sort(rowSums(m), decreasing = TRUE)
x <- sort(rowSums(m), decreasing = TRUE)
wordcloud_rep(names(x), x, scale=c(4,0.5),
min.freq = input$freq, max.words=input$max,
colors=brewer.pal(8, "Dark2"))
wordcloud_rep <- repeatable(wordcloud)
wordcloud_rep(names(x), x, scale=c(4,0.5),
min.freq = input$freq, max.words=input$max,
colors=brewer.pal(8, "Dark2"))
wordcloud_rep <- repeatable(wordcloud)
wordcloud_rep(names(x), x, scale=c(4,0.5),
min.freq = 20, max.words=300,
colors=brewer.pal(8, "Dark2"))
shiny::runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
text <- athletes$Sport
runApp('Olympics_Dashbaord')
olympics_df$Sport
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
df <- dplyr::select(df,COUNTRY,CODE)
x <- read.csv("df_athlete.csv", stringsAsFactors = FALSE)
olympics_df <-  read.csv("df_athlete.csv", stringsAsFactors = FALSE)
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal, 0),
Gold=replace_na(Medal, 0),
Bronze=replace_na(Medal, 0),
Silver=replace_na(Medal, 0))
olympics_df <- olympics_df %>%
drop_na()
text <- olympics_df$Sport
# Make the wordcloud drawing predictable during a session
terms <- myCorpus = Corpus(VectorSource(text))
myDTM <- TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m <- as.matrix(myDTM)
v <- sort(rowSums(m), decreasing = TRUE)
text <- olympics_df$Sport
myCorpus = Corpus(VectorSource(text))
myDTM <- TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m <- as.matrix(myDTM)
v <- sort(rowSums(m), decreasing = TRUE)
v
wordcloud_rep <- repeatable(wordcloud)
wordcloud_rep(names(v), v, scale=c(4,0.5),
min.freq = input$freq, max.words=input$max,
colors=brewer.pal(8, "Dark2"))
wordcloud_rep(names(v), v, scale=c(4,0.5),
min.freq = 15, max.words=300,
colors=brewer.pal(8, "Dark2"))
runApp('Olympics_Dashbaord')
olympics_df
text <- olympics_df %>%
filter(Medal!=0) %>%
select(Sport)
olympics_df %>% filter(Medal!=0)
text
myCorpus = Corpus(VectorSource(text))
myDTM <- TermDocumentMatrix(myCorpus,
control = list(minWordLength = 1))
m <- as.matrix(myDTM)
v <- sort(rowSums(m), decreasing = TRUE)
v
type(v)
typeof(v)
class(v)
runApp('Olympics_Dashbaord')
runApp('Olympics_Dashbaord')
olympics_df <- read.csv("df_athlete.csv",stringsAsFactors = FALSE)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(medal,0),
Gold=replace(Medal,0),
Bronze=replace(Medal,0),
Silver=replace(Medal,0))
olympics_df <- olympics_df %>%
drop_na()
olympics_df <- read.csv("df_athlete.csv",stringsAsFactors = FALSE)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(medal,0),
Gold=replace(Medal,0),
Bronze=replace(Medal,0),
Silver=replace(Medal,0))
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0),
Gold=replace(Medal,0),
Bronze=replace(Medal,0),
Silver=replace(Medal,0))
olympics_df <- olympics_df %>%
drop_na()
medals <- left_join(medals,df,by=c("country"="COUNTRY"))
medals <- left_join(olympics_df,df,by=c("country"="COUNTRY"))
df
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
df
medals <- left_join(olympics_df,df,by=c("country"="COUNTRY"))
medals <- medals %>%
mutate(medal_temp=if_else(Medal==0,0,1)) %>%
filter(Year>input$year_input[1],
Year>input$year_input[2]) %>%
group_by(country,CODE) %>%
summarize(medal_count=sum(medal_temp))
medals %>%
mutate(medal_temp=if_else(Medal==0,0,1))
runApp('~/test')
medals <- medals %>%
mutate(medal_temp=if_else(Medal==0,0,1)) %>%
group_by(country,CODE) %>%
summarize(medal_count=sum(medal_temp)
medals <- medals %>%
mutate(medal_temp=if_else(Medal==0,0,1))
medals <- medals %>%
mutate(medal_temp=if_else(Medal==0,0,1))
medals <- medals %>%
mutate(medal_temp=if_else(Medal==0,0,1)) %>%
group_by(country,CODE)
runApp('~/test')
setwd("~/Olympics_Medal_Exploration/Olympics_Dashbaord")
runApp('~/test')
olympics_df <- read.csv("df_athlete.csv",stringsAsFactors = FALSE)
runApp('~/test')
setwd("~/test")
runApp()
setwd("~/Olympics_Medal_Exploration/Olympics_Dashbaord")
runApp('~/test')
# Run the application
shinyApp(ui = ui, server = server)
setwd("~/Olympics_app")
runApp()
olympics_df <- read.csv("df_athlete.csv",stringsAsFactors = FALSE)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0),
Gold=replace(Medal,0),
Bronze=replace(Medal,0),
Silver=replace(Medal,0))
olympics_df <- olympics_df %>%
drop_na()
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0),
Gold=replace(Medal,0),
Bronze=replace(Medal,0),
Silver=replace(Medal,0))
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0)
)
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0),
Gold=replace(Medal,0),
Bronze=replace(Medal,0),
Silver=replace(Medal,0))
olympics_df <- olympics_df %>%
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0),
Gold=replace(Medal,0),
)
olympics_df <- read.csv("df_athlete.csv",stringsAsFactors = FALSE)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0))
olympics_df
olympics_df <- olympics_df %>%
mutate(Gold=replace_na(Medal,0))
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0),
Gold=replace(Medal,0)
)
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0)) %>%
mutate(Gold=replace(Medal,0))
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0))
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0)) %>%
mutate(Gold=replace(Medal,0))
olympics_df <- read.csv("df_athlete.csv",stringsAsFactors = FALSE)
library(shiny)
library(tidyverse)
library(ggplot2)
library(maps)
library(dplyr)
olympics_df <- read.csv("df_athlete.csv",stringsAsFactors = FALSE)
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0))
olympics_df <- olympics_df %>%
mutate(Gold=replace_na(Medal,0))
olympics_df <- olympics_df %>%
mutate(Gold=replace_na(Medal,0)) %>%
mutate(Gold=replace(Medal,0))
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0)) %>%
mutate(Gold=replace(Medal,0))
olympics_df <- read.csv("df_athlete.csv", stringsAsFactors = FALSE)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
olympics_df <- olympics_df %>%
mutate(Medal=replace_na(Medal,0),
Gold=replace(Medal,0),
Bronze=replace(Medal,0),
Silver=replace(Medal,0))
summary(olympics_df)
olympics_df
olympics_df <- olympics_df %>%
drop_na()
runApp()
runApp()
runApp()
medals <- left_join(olympics_df,df,by=c("country"="COUNTRY"))
medals <- medals %>%
mutate(medal_temp=if_else(Medal==0,0,1)) %>%
group_by(country,CODE) %>%
summarize(medal_count=sum(medal_temp))
medals
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
olympics_df
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- read.csv('2014_world_gdp_with_codes.csv')
athletes <- read.csv("df_athlete.csv",stringsAsFactors = FALSE)  %>%
mutate(Medal=replace_na(Medal,0),
Gold=replace_na(Gold,0),
Silver=replace_na(Silver,0),
Bronze=replace_na(Bronze,0),
Medal_Count = Gold + Silver + Bronze,
Medal_Value = Gold*3 + Silver*2 + Bronze,
Sex=if_else(Sex=="F","1","2")) %>%
select(-c(City)) %>%
drop_na()
athletes
df <- read.csv('2014_world_gdp_with_codes.csv')
athletes <- read.csv("df_athlete.csv",stringsAsFactors = FALSE)  %>%
mutate(Medal=replace_na(Medal,0),
Gold=replace_na(Gold,0),
Silver=replace_na(Silver,0),
Bronze=replace_na(Bronze,0),
Medal_Count = Gold + Silver + Bronze,
Medal_Value = Gold*3 + Silver*2 + Bronze,
Sex=if_else(Sex=="F","1","2")) %>%
select(-c(City)) %>%
filter(Medal_Count > 0) %>%
drop_na()
athletes
runApp()
runApp()
athletes %>%
filter(Year>input$inpYear[1],
Year<input$inpYear[2],
country %in% input$inpCountry,
Age >= input$sideAge[1],
Age <= input$sideAge[2],
Weight >= input$inpWeight[1],
Weight <= input$inpWeight[2],
Height >= input$inpHeight[1],
Height <= input$inpHeight[2],
Medal_Value %in% input$inpMedals,
Sex %in% input$inpSex,
Sport %in% input$inpSport)
runApp()
runApp()
runApp()
athletes #df_filtered() %>%
group_by(Sport) %>%
count()
runApp()
athletes #df_filtered() %>%
group_by(Sport) %>%
tally()
runApp()
athletes %>%  #df_filtered() %>%
group_by(Sport) %>%
tally()
athletes %>%  #df_filtered() %>%
group_by(Sport) %>%
tally() %>%
top_n(10)
runApp()
runApp()
runApp()
countries
sort(unique(athletes$country))
runApp()
runApp()
runApp()
