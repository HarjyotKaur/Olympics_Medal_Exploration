shiny::runApp()
runApp()
rsconnect::setAccountInfo(name='sandrews', token='32673B26FFD696E74568DCADF85AA119', secret='+GXovSysszu8hATZ0TnPs3oUltzuTZqpj9TYGgJD')
library(rsconnect)
rsconnect::deployApp('/users/shayne/mds/532/Olympics_Shinyapp')
runApp()
getwd()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
athletes <- read.csv("/users/shayne/mds/532/Olympics_Shinyapp/data/df_athletes.csv", stringsAsFactors = FALSE)
athletes <- read.csv("/users/shayne/mds/532/Olympics_Shinyapp/data/df_athletes.csv", stringsAsFactors = FALSE)
getwd()
athletes <- read.csv("/Users/shayne/MDS/532/Olympics_Shinyapp/data/df_athletes.csv", stringsAsFactors = FALSE)
athletes <- read.csv("/Users/shayne/MDS/532/Olympics_Shinyapp/data/df_athletes.csv", stringsAsFactors = FALSE)
athletes <- read.csv("//Users//shayne//MDS/532//Olympics_Shinyapp//data//df_athletes.csv", stringsAsFactors = FALSE)
athletes <- read.csv("/Users/shayne/MDS/532/Olympics_Shinyapp/data/df_athlete.csv", stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
length(athletes)
athletes$Age
max(athletes$Age)
max(c(1,2,3))
runApp()
runApp()
rsconnect::deployApp('/users/shayne/mds/532/Olympics_Shinyapp')
runApp()
runApp()
runApp()
install.packlages("cowplot")
install.packages("cowplot")
runApp()
runApp()
runApp()
medals <- left_join(athletes,df,by=c("country"="COUNTRY"))
medals <- medals %>%
mutate(medal_temp=if_else(Medal==0,0,1)) %>%
group_by(country,CODE) %>%
filter(Year>input$year_imput[1],
Year<input$year_imput[2],
country %in% input$country_input) %>%
summarize(medal_count=sum(medal_temp))
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(medals) %>%
add_trace(
z = ~medal_count, color = ~medal_count, colors = 'Spectral',
text = ~country, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Medal Count') %>%
layout(
title = 'World medal history',
geo = g
)
runApp()
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
athletes <- read.csv("data/df_athlete.csv")
ageRange <- c(10,70)
weightRange <- c(25,150)
medals <- left_join(athletes,df,by=c("country"="COUNTRY"))
medals <- medals %>%
mutate(medal_temp=if_else(Medal==0,0,1)) %>%
group_by(country,CODE) %>%
filter(Year>input$year_imput[1],
Year<input$year_imput[2],
country %in% input$country_input) %>%
summarize(medal_count=sum(medal_temp))
medals <- left_join(athletes,df,by=c("country"="COUNTRY"))
medals
medals <- medals %>%
mutate(medal_temp=if_else(Medal==0,0,1)) %>%
group_by(country,CODE) %>%
summarize(medal_count=sum(medal_temp))
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(medals) %>%
add_trace(
z = ~medal_count, color = ~medal_count, colors = 'Spectral',
text = ~country, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'Medal Count') %>%
layout(
title = 'World medal history',
geo = g
)
runApp()
View(medals)
olympics_df <- athletes %>%
mutate(Medal=replace_na(Medal,0))
View(olympics_df)
if_else?
View(athletes)
?replace_na
olympics_df <- athletes %>%
mutate(Medal=replace_na(Medal,0))
olympics_df2 <- athletes %>%
mutate(Medal=replace_na(Medal,0))
View(olympics_df2)
olympics_df <- athletes %>%
mutate(Gold=replace_na(Gold,0),
Silver=replace_na(Silver,0),
Bronze=replace_na(Bronze,0),
Medal_Count = Gold + Silver + Bronze)
View(olympics_df)
runApp()
View(athletes)
athletes <- athletes %>%
mutate(Gold=replace_na(Gold,0),
Silver=replace_na(Silver,0),
Bronze=replace_na(Bronze,0),
Medal_Count = Gold + Silver + Bronze)
View(athletes)
athletes <- athletes %>%
mutate(Gold=replace_na(Gold,0),
Silver=replace_na(Silver,0),
Bronze=replace_na(Bronze,0),
Medal_Count = Gold + Silver + Bronze,
Medal_Value = Gold*3 + Silver*2 + Bronze)
View(athletes)
runApp()
test_df <-  athletes %>%
count() %>%
group_by(Sex)
test_df <-  athletes %>%
group_by(Sex) %>%
count()
View(test_df)
runApp()
runApp()
runApp()
